{"version":3,"sources":["GuessWord.test.js"],"names":["defaultProps","guessedWords","guessedWord","letterMatchCount","setup","props","setupProps","test","GuessWord","describe","wrapper","beforeEach","component","expect","length","toBe","instructions","text","not"],"mappings":";;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;;AAEA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE,CAAC;AACXC,IAAAA,WAAW,EAAE,OADF;AAEXC,IAAAA,gBAAgB,EAAE;AAFP,GAAD;AADG,CAArB;;AAOA,MAAMC,KAAK,GAAG,CAACC,KAAK,GAAG,EAAT,KAAgB;AAC1B,QAAMC,UAAU,mCAAQN,YAAR,EAAyBK,KAAzB,CAAhB;AACA,SAAO,qBAAQ,6BAAC,kBAAD,oBAAeC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR,CAAP;AACH,CAHD;;AAKAC,IAAI,CAAC,8CAAD,EAAiD,MAAM;AACvD,4BAAWP,YAAX,EAAyBQ,kBAAzB;AACH,CAFG,CAAJ;AAIAC,QAAQ,CAAC,+BAAD,EAAkC,MAAM;AAC5C,MAAIC,OAAJ;AACAC,EAAAA,UAAU,CAAC,MAAM;AACbD,IAAAA,OAAO,GAAGN,KAAK,CAAC;AAAEH,MAAAA,YAAY,EAAE;AAAhB,KAAD,CAAf;AACH,GAFS,CAAV;AAIAM,EAAAA,IAAI,CAAC,6BAAD,EAAgC,MAAM;AACtC,UAAMK,SAAS,GAAG,8BAAeF,OAAf,EAAwB,yBAAxB,CAAlB;AACAG,IAAAA,MAAM,CAACD,SAAS,CAACE,MAAX,CAAN,CAAyBC,IAAzB,CAA8B,CAA9B;AACH,GAHG,CAAJ;AAKAR,EAAAA,IAAI,CAAC,4BAAD,EAA+B,MAAM;AACrC,UAAMS,YAAY,GAAG,8BAAeN,OAAf,EAAwB,wBAAxB,CAArB;AACAG,IAAAA,MAAM,CAACG,YAAY,CAACC,IAAb,EAAD,CAAN,CAA4BC,GAA5B,CAAgCH,IAAhC,CAAqC,CAArC;AACH,GAHG,CAAJ;AAOH,CAlBO,CAAR;AAoBAN,QAAQ,CAAC,4BAAD,EAA+B,MAAM;AACzCF,EAAAA,IAAI,CAAC,6BAAD,EAAgC,MAAM,CAEzC,CAFG,CAAJ;AAIAA,EAAAA,IAAI,CAAC,qCAAD,EAAwC,MAAM,CAEjD,CAFG,CAAJ;AAIAA,EAAAA,IAAI,CAAC,+CAAD,EAAkD,MAAM,CAE3D,CAFG,CAAJ;AAKH,CAdO,CAAR","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\n\nimport GuessWord from './GuessWord';\nimport { findByTestAttr, checkProps } from '../test/testUtil';\nimport { exportAllDeclaration } from '@babel/types';\n\nconst defaultProps = {\n    guessedWords: [{\n        guessedWord: 'train',\n        letterMatchCount: 3\n    }]\n}\n\nconst setup = (props = {}) => {\n    const setupProps = { ...defaultProps, ...props };\n    return shallow(<GuessWord {...setupProps} />)\n}\n\ntest('should not throw warning with expected props', () => {\n    checkProps(defaultProps, GuessWord)\n})\n\ndescribe('if there are no words guessed', () => {\n    let wrapper;\n    beforeEach(() => {\n        wrapper = setup({ guessedWords: [] })\n    })\n\n    test('should render without error', () => {\n        const component = findByTestAttr(wrapper, 'component-guessed-words')\n        expect(component.length).toBe(1)\n    })\n\n    test('should render instructions', () => {\n        const instructions = findByTestAttr(wrapper, 'component-instructions');\n        expect(instructions.text()).not.toBe(0)\n    })\n\n\n\n})\n\ndescribe('if there are words guessed', () => {\n    test('should render without error', () => {\n\n    })\n\n    test('should render guessed words section', () => {\n\n    })\n\n    test('should render correct number of guessed words', () => {\n\n    })\n\n\n})"]}