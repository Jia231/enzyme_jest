5ff017dbe5ea7f55a6cedb7ef7c45ed9
"use strict";

var _interopRequireDefault = require("/home/jia/Desktop/tests/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/jia/Desktop/tests/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _react = _interopRequireDefault(require("react"));

var _enzyme = _interopRequireWildcard(require("enzyme"));

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _App = _interopRequireDefault(require("./App"));

var _types = require("@babel/types");

var _module = require("module");

var _jsxFileName = "/home/jia/Desktop/tests/src/App.test.js";

_enzyme.default.configure({
  adapter: new _enzymeAdapterReact.default()
});

const setup = () => {
  const wrapper = (0, _enzyme.shallow)(_react.default.createElement(_App.default, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 14
    },
    __self: void 0
  }));
  return wrapper;
};

const findByDataTest = (wrapper, val) => {
  return wrapper.find(`[data-test="${val}"]`);
};

test('it should render without any errors', () => {
  const wrapper = setup();
  const appComponent = wrapper.find(`[data-test="component-App"]`);
  expect(appComponent.length).toBe(1);
});
test('it should render a button', () => {
  const wrapper = setup();
  const buttonComponent = wrapper.find(`[data-test="increment"]`);
  expect(buttonComponent.length).toBe(1);
});
test('counter display should be displayed', () => {
  const wrapper = setup();
  const counterDisplay = wrapper.find(`[data-test="counter-display"]`);
  expect(counterDisplay.length).toBe(1);
});
test('state should start at 0', () => {
  const wrapper = setup();
  const initialState = wrapper.state('counter');
  expect(initialState).toBe(0);
});
test('after button clicking state should increment by 1', () => {
  const wrapper = setup();
  const wrapperWithState = wrapper.setState({
    counter: 7
  });
  const buttonComponent = wrapper.find(`[data-test="increment"]`);
  buttonComponent.simulate('click');
  wrapper.update();
  const counterDisplay = wrapper.find(`[data-test="counter-display"]`);
  expect(counterDisplay.text()).toContain(8);
});
test('it should not show error at the start', () => {});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFwcC50ZXN0LmpzIl0sIm5hbWVzIjpbIkVuenltZSIsImNvbmZpZ3VyZSIsImFkYXB0ZXIiLCJFbnp5bWVBZGFwdGVyIiwic2V0dXAiLCJ3cmFwcGVyIiwiZmluZEJ5RGF0YVRlc3QiLCJ2YWwiLCJmaW5kIiwidGVzdCIsImFwcENvbXBvbmVudCIsImV4cGVjdCIsImxlbmd0aCIsInRvQmUiLCJidXR0b25Db21wb25lbnQiLCJjb3VudGVyRGlzcGxheSIsImluaXRpYWxTdGF0ZSIsInN0YXRlIiwid3JhcHBlcldpdGhTdGF0ZSIsInNldFN0YXRlIiwiY291bnRlciIsInNpbXVsYXRlIiwidXBkYXRlIiwidGV4dCIsInRvQ29udGFpbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQUEsZ0JBQU9DLFNBQVAsQ0FBaUI7QUFBQ0MsRUFBQUEsT0FBTyxFQUFDLElBQUlDLDJCQUFKO0FBQVQsQ0FBakI7O0FBR0EsTUFBTUMsS0FBSyxHQUFHLE1BQUk7QUFDaEIsUUFBTUMsT0FBTyxHQUFHLHFCQUFRLDZCQUFDLFlBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBUixDQUFoQjtBQUNBLFNBQU9BLE9BQVA7QUFDRCxDQUhEOztBQUtBLE1BQU1DLGNBQWMsR0FBRyxDQUFDRCxPQUFELEVBQVNFLEdBQVQsS0FBZTtBQUNwQyxTQUFPRixPQUFPLENBQUNHLElBQVIsQ0FBYyxlQUFjRCxHQUFJLElBQWhDLENBQVA7QUFDRCxDQUZEOztBQUtBRSxJQUFJLENBQUMscUNBQUQsRUFBdUMsTUFBSTtBQUM3QyxRQUFNSixPQUFPLEdBQUdELEtBQUssRUFBckI7QUFDQSxRQUFNTSxZQUFZLEdBQUdMLE9BQU8sQ0FBQ0csSUFBUixDQUFjLDZCQUFkLENBQXJCO0FBRUFHLEVBQUFBLE1BQU0sQ0FBQ0QsWUFBWSxDQUFDRSxNQUFkLENBQU4sQ0FBNEJDLElBQTVCLENBQWlDLENBQWpDO0FBQ0QsQ0FMRyxDQUFKO0FBT0FKLElBQUksQ0FBQywyQkFBRCxFQUE2QixNQUFJO0FBQ25DLFFBQU1KLE9BQU8sR0FBR0QsS0FBSyxFQUFyQjtBQUNBLFFBQU1VLGVBQWUsR0FBR1QsT0FBTyxDQUFDRyxJQUFSLENBQWMseUJBQWQsQ0FBeEI7QUFDQUcsRUFBQUEsTUFBTSxDQUFDRyxlQUFlLENBQUNGLE1BQWpCLENBQU4sQ0FBK0JDLElBQS9CLENBQW9DLENBQXBDO0FBQ0QsQ0FKRyxDQUFKO0FBTUFKLElBQUksQ0FBQyxxQ0FBRCxFQUF1QyxNQUFJO0FBQzdDLFFBQU1KLE9BQU8sR0FBR0QsS0FBSyxFQUFyQjtBQUNBLFFBQU1XLGNBQWMsR0FBR1YsT0FBTyxDQUFDRyxJQUFSLENBQWMsK0JBQWQsQ0FBdkI7QUFFQUcsRUFBQUEsTUFBTSxDQUFDSSxjQUFjLENBQUNILE1BQWhCLENBQU4sQ0FBOEJDLElBQTlCLENBQW1DLENBQW5DO0FBQ0QsQ0FMRyxDQUFKO0FBT0FKLElBQUksQ0FBQyx5QkFBRCxFQUEyQixNQUFJO0FBQ2xDLFFBQU1KLE9BQU8sR0FBR0QsS0FBSyxFQUFyQjtBQUNBLFFBQU1ZLFlBQVksR0FBR1gsT0FBTyxDQUFDWSxLQUFSLENBQWMsU0FBZCxDQUFyQjtBQUVBTixFQUFBQSxNQUFNLENBQUNLLFlBQUQsQ0FBTixDQUFxQkgsSUFBckIsQ0FBMEIsQ0FBMUI7QUFDQSxDQUxHLENBQUo7QUFPQUosSUFBSSxDQUFDLG1EQUFELEVBQXFELE1BQUk7QUFDM0QsUUFBTUosT0FBTyxHQUFHRCxLQUFLLEVBQXJCO0FBQ0EsUUFBTWMsZ0JBQWdCLEdBQUdiLE9BQU8sQ0FBQ2MsUUFBUixDQUFpQjtBQUFDQyxJQUFBQSxPQUFPLEVBQUM7QUFBVCxHQUFqQixDQUF6QjtBQUNBLFFBQU1OLGVBQWUsR0FBR1QsT0FBTyxDQUFDRyxJQUFSLENBQWMseUJBQWQsQ0FBeEI7QUFDQU0sRUFBQUEsZUFBZSxDQUFDTyxRQUFoQixDQUF5QixPQUF6QjtBQUNBaEIsRUFBQUEsT0FBTyxDQUFDaUIsTUFBUjtBQUNBLFFBQU1QLGNBQWMsR0FBR1YsT0FBTyxDQUFDRyxJQUFSLENBQWMsK0JBQWQsQ0FBdkI7QUFDQUcsRUFBQUEsTUFBTSxDQUFDSSxjQUFjLENBQUNRLElBQWYsRUFBRCxDQUFOLENBQThCQyxTQUE5QixDQUF3QyxDQUF4QztBQUNELENBUkcsQ0FBSjtBQVVBZixJQUFJLENBQUMsdUNBQUQsRUFBeUMsTUFBSSxDQUVoRCxDQUZHLENBQUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEVuenltZSwge3NoYWxsb3d9IGZyb20gXCJlbnp5bWVcIjtcbmltcG9ydCBFbnp5bWVBZGFwdGVyIGZyb20gXCJlbnp5bWUtYWRhcHRlci1yZWFjdC0xNlwiO1xuXG5cbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnO1xuaW1wb3J0IHsgZXhwb3J0QWxsRGVjbGFyYXRpb24gfSBmcm9tICdAYmFiZWwvdHlwZXMnO1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJ21vZHVsZSc7XG5cbkVuenltZS5jb25maWd1cmUoe2FkYXB0ZXI6bmV3IEVuenltZUFkYXB0ZXIoKX0pXG5cblxuY29uc3Qgc2V0dXAgPSAoKT0+e1xuICBjb25zdCB3cmFwcGVyID0gc2hhbGxvdyg8QXBwLz4pXG4gIHJldHVybiB3cmFwcGVyO1xufVxuXG5jb25zdCBmaW5kQnlEYXRhVGVzdCA9ICh3cmFwcGVyLHZhbCk9PntcbiAgcmV0dXJuIHdyYXBwZXIuZmluZChgW2RhdGEtdGVzdD1cIiR7dmFsfVwiXWApXG59XG5cblxudGVzdCgnaXQgc2hvdWxkIHJlbmRlciB3aXRob3V0IGFueSBlcnJvcnMnLCgpPT57XG4gIGNvbnN0IHdyYXBwZXIgPSBzZXR1cCgpO1xuICBjb25zdCBhcHBDb21wb25lbnQgPSB3cmFwcGVyLmZpbmQoYFtkYXRhLXRlc3Q9XCJjb21wb25lbnQtQXBwXCJdYCk7XG5cbiAgZXhwZWN0KGFwcENvbXBvbmVudC5sZW5ndGgpLnRvQmUoMSlcbn0pXG5cbnRlc3QoJ2l0IHNob3VsZCByZW5kZXIgYSBidXR0b24nLCgpPT57XG4gIGNvbnN0IHdyYXBwZXIgPSBzZXR1cCgpO1xuICBjb25zdCBidXR0b25Db21wb25lbnQgPSB3cmFwcGVyLmZpbmQoYFtkYXRhLXRlc3Q9XCJpbmNyZW1lbnRcIl1gKVxuICBleHBlY3QoYnV0dG9uQ29tcG9uZW50Lmxlbmd0aCkudG9CZSgxKVxufSlcblxudGVzdCgnY291bnRlciBkaXNwbGF5IHNob3VsZCBiZSBkaXNwbGF5ZWQnLCgpPT57XG4gIGNvbnN0IHdyYXBwZXIgPSBzZXR1cCgpO1xuICBjb25zdCBjb3VudGVyRGlzcGxheSA9IHdyYXBwZXIuZmluZChgW2RhdGEtdGVzdD1cImNvdW50ZXItZGlzcGxheVwiXWApXG5cbiAgZXhwZWN0KGNvdW50ZXJEaXNwbGF5Lmxlbmd0aCkudG9CZSgxKVxufSlcblxudGVzdCgnc3RhdGUgc2hvdWxkIHN0YXJ0IGF0IDAnLCgpPT57XG4gY29uc3Qgd3JhcHBlciA9IHNldHVwKCk7XG4gY29uc3QgaW5pdGlhbFN0YXRlID0gd3JhcHBlci5zdGF0ZSgnY291bnRlcicpXG5cbiBleHBlY3QoaW5pdGlhbFN0YXRlKS50b0JlKDApXG59KVxuXG50ZXN0KCdhZnRlciBidXR0b24gY2xpY2tpbmcgc3RhdGUgc2hvdWxkIGluY3JlbWVudCBieSAxJywoKT0+e1xuICBjb25zdCB3cmFwcGVyID0gc2V0dXAoKTtcbiAgY29uc3Qgd3JhcHBlcldpdGhTdGF0ZSA9IHdyYXBwZXIuc2V0U3RhdGUoe2NvdW50ZXI6N30pXG4gIGNvbnN0IGJ1dHRvbkNvbXBvbmVudCA9IHdyYXBwZXIuZmluZChgW2RhdGEtdGVzdD1cImluY3JlbWVudFwiXWApXG4gIGJ1dHRvbkNvbXBvbmVudC5zaW11bGF0ZSgnY2xpY2snKVxuICB3cmFwcGVyLnVwZGF0ZSgpO1xuICBjb25zdCBjb3VudGVyRGlzcGxheSA9IHdyYXBwZXIuZmluZChgW2RhdGEtdGVzdD1cImNvdW50ZXItZGlzcGxheVwiXWApXG4gIGV4cGVjdChjb3VudGVyRGlzcGxheS50ZXh0KCkpLnRvQ29udGFpbig4KVxufSlcblxudGVzdCgnaXQgc2hvdWxkIG5vdCBzaG93IGVycm9yIGF0IHRoZSBzdGFydCcsKCk9PntcbiAgXG59KVxuIl19