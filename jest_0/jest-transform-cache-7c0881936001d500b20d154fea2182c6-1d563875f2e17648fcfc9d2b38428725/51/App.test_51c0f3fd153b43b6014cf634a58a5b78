2c69c6705297caf347448b5f52a4324c
"use strict";

var _interopRequireDefault = require("/home/jia/Desktop/tests/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/jia/Desktop/tests/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _react = _interopRequireDefault(require("react"));

var _enzyme = _interopRequireWildcard(require("enzyme"));

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _App = _interopRequireDefault(require("./App"));

var _types = require("@babel/types");

var _module = require("module");

var _jsxFileName = "/home/jia/Desktop/tests/src/App.test.js";

_enzyme.default.configure({
  adapter: new _enzymeAdapterReact.default()
});

const setup = () => {
  const wrapper = (0, _enzyme.shallow)(_react.default.createElement(_App.default, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 14
    },
    __self: void 0
  }));
  return wrapper;
};

const findByDataTest = (wrapper, val) => {
  return wrapper.find(`[data-test="${val}"]`);
};

test('it should render without any errors', () => {
  const wrapper = setup();
  const appComponent = findByDataTest(wrapper, "component-App");
  expect(appComponent.length).toBe(1);
});
test('it should render a button', () => {
  const wrapper = setup();
  const buttonComponent = wrapper.find(`[data-test="increment"]`);
  expect(buttonComponent.length).toBe(1);
});
test('counter display should be displayed', () => {
  const wrapper = setup();
  const counterDisplay = wrapper.find(`[data-test="counter-display"]`);
  expect(counterDisplay.length).toBe(1);
});
test('state should start at 0', () => {
  const wrapper = setup();
  const initialState = wrapper.state('counter');
  expect(initialState).toBe(0);
});
test('after button clicking state should increment by 1', () => {
  const wrapper = setup();
  const wrapperWithState = wrapper.setState({
    counter: 7
  });
  const buttonComponent = wrapper.find(`[data-test="increment"]`);
  buttonComponent.simulate('click');
  wrapper.update();
  const counterDisplay = wrapper.find(`[data-test="counter-display"]`);
  expect(counterDisplay.text()).toContain(8);
});
test('it should not show error at the start', () => {});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFwcC50ZXN0LmpzIl0sIm5hbWVzIjpbIkVuenltZSIsImNvbmZpZ3VyZSIsImFkYXB0ZXIiLCJFbnp5bWVBZGFwdGVyIiwic2V0dXAiLCJ3cmFwcGVyIiwiZmluZEJ5RGF0YVRlc3QiLCJ2YWwiLCJmaW5kIiwidGVzdCIsImFwcENvbXBvbmVudCIsImV4cGVjdCIsImxlbmd0aCIsInRvQmUiLCJidXR0b25Db21wb25lbnQiLCJjb3VudGVyRGlzcGxheSIsImluaXRpYWxTdGF0ZSIsInN0YXRlIiwid3JhcHBlcldpdGhTdGF0ZSIsInNldFN0YXRlIiwiY291bnRlciIsInNpbXVsYXRlIiwidXBkYXRlIiwidGV4dCIsInRvQ29udGFpbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQUEsZ0JBQU9DLFNBQVAsQ0FBaUI7QUFBQ0MsRUFBQUEsT0FBTyxFQUFDLElBQUlDLDJCQUFKO0FBQVQsQ0FBakI7O0FBR0EsTUFBTUMsS0FBSyxHQUFHLE1BQUk7QUFDaEIsUUFBTUMsT0FBTyxHQUFHLHFCQUFRLDZCQUFDLFlBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBUixDQUFoQjtBQUNBLFNBQU9BLE9BQVA7QUFDRCxDQUhEOztBQUtBLE1BQU1DLGNBQWMsR0FBRyxDQUFDRCxPQUFELEVBQVNFLEdBQVQsS0FBZTtBQUNwQyxTQUFPRixPQUFPLENBQUNHLElBQVIsQ0FBYyxlQUFjRCxHQUFJLElBQWhDLENBQVA7QUFDRCxDQUZEOztBQUtBRSxJQUFJLENBQUMscUNBQUQsRUFBdUMsTUFBSTtBQUM3QyxRQUFNSixPQUFPLEdBQUdELEtBQUssRUFBckI7QUFDQSxRQUFNTSxZQUFZLEdBQUdKLGNBQWMsQ0FBQ0QsT0FBRCxFQUFTLGVBQVQsQ0FBbkM7QUFFQU0sRUFBQUEsTUFBTSxDQUFDRCxZQUFZLENBQUNFLE1BQWQsQ0FBTixDQUE0QkMsSUFBNUIsQ0FBaUMsQ0FBakM7QUFDRCxDQUxHLENBQUo7QUFPQUosSUFBSSxDQUFDLDJCQUFELEVBQTZCLE1BQUk7QUFDbkMsUUFBTUosT0FBTyxHQUFHRCxLQUFLLEVBQXJCO0FBQ0EsUUFBTVUsZUFBZSxHQUFHVCxPQUFPLENBQUNHLElBQVIsQ0FBYyx5QkFBZCxDQUF4QjtBQUNBRyxFQUFBQSxNQUFNLENBQUNHLGVBQWUsQ0FBQ0YsTUFBakIsQ0FBTixDQUErQkMsSUFBL0IsQ0FBb0MsQ0FBcEM7QUFDRCxDQUpHLENBQUo7QUFNQUosSUFBSSxDQUFDLHFDQUFELEVBQXVDLE1BQUk7QUFDN0MsUUFBTUosT0FBTyxHQUFHRCxLQUFLLEVBQXJCO0FBQ0EsUUFBTVcsY0FBYyxHQUFHVixPQUFPLENBQUNHLElBQVIsQ0FBYywrQkFBZCxDQUF2QjtBQUVBRyxFQUFBQSxNQUFNLENBQUNJLGNBQWMsQ0FBQ0gsTUFBaEIsQ0FBTixDQUE4QkMsSUFBOUIsQ0FBbUMsQ0FBbkM7QUFDRCxDQUxHLENBQUo7QUFPQUosSUFBSSxDQUFDLHlCQUFELEVBQTJCLE1BQUk7QUFDbEMsUUFBTUosT0FBTyxHQUFHRCxLQUFLLEVBQXJCO0FBQ0EsUUFBTVksWUFBWSxHQUFHWCxPQUFPLENBQUNZLEtBQVIsQ0FBYyxTQUFkLENBQXJCO0FBRUFOLEVBQUFBLE1BQU0sQ0FBQ0ssWUFBRCxDQUFOLENBQXFCSCxJQUFyQixDQUEwQixDQUExQjtBQUNBLENBTEcsQ0FBSjtBQU9BSixJQUFJLENBQUMsbURBQUQsRUFBcUQsTUFBSTtBQUMzRCxRQUFNSixPQUFPLEdBQUdELEtBQUssRUFBckI7QUFDQSxRQUFNYyxnQkFBZ0IsR0FBR2IsT0FBTyxDQUFDYyxRQUFSLENBQWlCO0FBQUNDLElBQUFBLE9BQU8sRUFBQztBQUFULEdBQWpCLENBQXpCO0FBQ0EsUUFBTU4sZUFBZSxHQUFHVCxPQUFPLENBQUNHLElBQVIsQ0FBYyx5QkFBZCxDQUF4QjtBQUNBTSxFQUFBQSxlQUFlLENBQUNPLFFBQWhCLENBQXlCLE9BQXpCO0FBQ0FoQixFQUFBQSxPQUFPLENBQUNpQixNQUFSO0FBQ0EsUUFBTVAsY0FBYyxHQUFHVixPQUFPLENBQUNHLElBQVIsQ0FBYywrQkFBZCxDQUF2QjtBQUNBRyxFQUFBQSxNQUFNLENBQUNJLGNBQWMsQ0FBQ1EsSUFBZixFQUFELENBQU4sQ0FBOEJDLFNBQTlCLENBQXdDLENBQXhDO0FBQ0QsQ0FSRyxDQUFKO0FBVUFmLElBQUksQ0FBQyx1Q0FBRCxFQUF5QyxNQUFJLENBRWhELENBRkcsQ0FBSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRW56eW1lLCB7c2hhbGxvd30gZnJvbSBcImVuenltZVwiO1xuaW1wb3J0IEVuenltZUFkYXB0ZXIgZnJvbSBcImVuenltZS1hZGFwdGVyLXJlYWN0LTE2XCI7XG5cblxuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XG5pbXBvcnQgeyBleHBvcnRBbGxEZWNsYXJhdGlvbiB9IGZyb20gJ0BiYWJlbC90eXBlcyc7XG5pbXBvcnQgeyB3cmFwIH0gZnJvbSAnbW9kdWxlJztcblxuRW56eW1lLmNvbmZpZ3VyZSh7YWRhcHRlcjpuZXcgRW56eW1lQWRhcHRlcigpfSlcblxuXG5jb25zdCBzZXR1cCA9ICgpPT57XG4gIGNvbnN0IHdyYXBwZXIgPSBzaGFsbG93KDxBcHAvPilcbiAgcmV0dXJuIHdyYXBwZXI7XG59XG5cbmNvbnN0IGZpbmRCeURhdGFUZXN0ID0gKHdyYXBwZXIsdmFsKT0+e1xuICByZXR1cm4gd3JhcHBlci5maW5kKGBbZGF0YS10ZXN0PVwiJHt2YWx9XCJdYClcbn1cblxuXG50ZXN0KCdpdCBzaG91bGQgcmVuZGVyIHdpdGhvdXQgYW55IGVycm9ycycsKCk9PntcbiAgY29uc3Qgd3JhcHBlciA9IHNldHVwKCk7XG4gIGNvbnN0IGFwcENvbXBvbmVudCA9IGZpbmRCeURhdGFUZXN0KHdyYXBwZXIsXCJjb21wb25lbnQtQXBwXCIpXG5cbiAgZXhwZWN0KGFwcENvbXBvbmVudC5sZW5ndGgpLnRvQmUoMSlcbn0pXG5cbnRlc3QoJ2l0IHNob3VsZCByZW5kZXIgYSBidXR0b24nLCgpPT57XG4gIGNvbnN0IHdyYXBwZXIgPSBzZXR1cCgpO1xuICBjb25zdCBidXR0b25Db21wb25lbnQgPSB3cmFwcGVyLmZpbmQoYFtkYXRhLXRlc3Q9XCJpbmNyZW1lbnRcIl1gKVxuICBleHBlY3QoYnV0dG9uQ29tcG9uZW50Lmxlbmd0aCkudG9CZSgxKVxufSlcblxudGVzdCgnY291bnRlciBkaXNwbGF5IHNob3VsZCBiZSBkaXNwbGF5ZWQnLCgpPT57XG4gIGNvbnN0IHdyYXBwZXIgPSBzZXR1cCgpO1xuICBjb25zdCBjb3VudGVyRGlzcGxheSA9IHdyYXBwZXIuZmluZChgW2RhdGEtdGVzdD1cImNvdW50ZXItZGlzcGxheVwiXWApXG5cbiAgZXhwZWN0KGNvdW50ZXJEaXNwbGF5Lmxlbmd0aCkudG9CZSgxKVxufSlcblxudGVzdCgnc3RhdGUgc2hvdWxkIHN0YXJ0IGF0IDAnLCgpPT57XG4gY29uc3Qgd3JhcHBlciA9IHNldHVwKCk7XG4gY29uc3QgaW5pdGlhbFN0YXRlID0gd3JhcHBlci5zdGF0ZSgnY291bnRlcicpXG5cbiBleHBlY3QoaW5pdGlhbFN0YXRlKS50b0JlKDApXG59KVxuXG50ZXN0KCdhZnRlciBidXR0b24gY2xpY2tpbmcgc3RhdGUgc2hvdWxkIGluY3JlbWVudCBieSAxJywoKT0+e1xuICBjb25zdCB3cmFwcGVyID0gc2V0dXAoKTtcbiAgY29uc3Qgd3JhcHBlcldpdGhTdGF0ZSA9IHdyYXBwZXIuc2V0U3RhdGUoe2NvdW50ZXI6N30pXG4gIGNvbnN0IGJ1dHRvbkNvbXBvbmVudCA9IHdyYXBwZXIuZmluZChgW2RhdGEtdGVzdD1cImluY3JlbWVudFwiXWApXG4gIGJ1dHRvbkNvbXBvbmVudC5zaW11bGF0ZSgnY2xpY2snKVxuICB3cmFwcGVyLnVwZGF0ZSgpO1xuICBjb25zdCBjb3VudGVyRGlzcGxheSA9IHdyYXBwZXIuZmluZChgW2RhdGEtdGVzdD1cImNvdW50ZXItZGlzcGxheVwiXWApXG4gIGV4cGVjdChjb3VudGVyRGlzcGxheS50ZXh0KCkpLnRvQ29udGFpbig4KVxufSlcblxudGVzdCgnaXQgc2hvdWxkIG5vdCBzaG93IGVycm9yIGF0IHRoZSBzdGFydCcsKCk9PntcbiAgXG59KVxuIl19