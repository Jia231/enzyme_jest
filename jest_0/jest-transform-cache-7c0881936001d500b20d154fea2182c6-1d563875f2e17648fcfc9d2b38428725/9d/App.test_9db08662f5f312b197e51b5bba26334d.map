{"version":3,"sources":["App.test.js"],"names":["Enzyme","configure","adapter","EnzymeAdapter","test","wrapper","appComponent","find","expect","length","toBe","buttonComponent","counterDisplay","initialState","state","wrapperWithState","setState","counter"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AAGA;;AACA;;AACA;;;;AAEAA,gBAAOC,SAAP,CAAiB;AAACC,EAAAA,OAAO,EAAC,IAAIC,2BAAJ;AAAT,CAAjB;;AAEAC,IAAI,CAAC,qCAAD,EAAuC,MAAI;AAC7C,QAAMC,OAAO,GAAG,qBAAQ,6BAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR,CAAhB;AACA,QAAMC,YAAY,GAAGD,OAAO,CAACE,IAAR,CAAc,6BAAd,CAArB;AAEAC,EAAAA,MAAM,CAACF,YAAY,CAACG,MAAd,CAAN,CAA4BC,IAA5B,CAAiC,CAAjC;AACD,CALG,CAAJ;AAOAN,IAAI,CAAC,2BAAD,EAA6B,MAAI;AACnC,QAAMC,OAAO,GAAG,qBAAQ,6BAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR,CAAhB;AACA,QAAMM,eAAe,GAAGN,OAAO,CAACE,IAAR,CAAc,yBAAd,CAAxB;AACAC,EAAAA,MAAM,CAACG,eAAe,CAACF,MAAjB,CAAN,CAA+BC,IAA/B,CAAoC,CAApC;AACD,CAJG,CAAJ;AAMAN,IAAI,CAAC,qCAAD,EAAuC,MAAI;AAC7C,QAAMC,OAAO,GAAG,qBAAQ,6BAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR,CAAhB;AACA,QAAMO,cAAc,GAAGP,OAAO,CAACE,IAAR,CAAc,+BAAd,CAAvB;AAEAC,EAAAA,MAAM,CAACI,cAAc,CAACH,MAAhB,CAAN,CAA8BC,IAA9B,CAAmC,CAAnC;AACD,CALG,CAAJ;AAOAN,IAAI,CAAC,yBAAD,EAA2B,MAAI;AAClC,QAAMC,OAAO,GAAG,qBAAQ,6BAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR,CAAhB;AACA,QAAMQ,YAAY,GAAGR,OAAO,CAACS,KAAR,CAAc,SAAd,CAArB;AAEAN,EAAAA,MAAM,CAACK,YAAD,CAAN,CAAqBH,IAArB,CAA0B,CAA1B;AACA,CALG,CAAJ;AASAN,IAAI,CAAC,mDAAD,EAAqD,MAAI;AAC3D,QAAMC,OAAO,GAAG,qBAAQ,6BAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR,CAAhB;AACA,QAAMU,gBAAgB,GAAGV,OAAO,CAACW,QAAR,CAAiB;AAACC,IAAAA,OAAO,EAAC;AAAT,GAAjB,CAAzB;AACD,CAHG,CAAJ","sourcesContent":["import React from 'react';\nimport Enzyme, {shallow} from \"enzyme\";\nimport EnzymeAdapter from \"enzyme-adapter-react-16\";\n\n\nimport App from './App';\nimport { exportAllDeclaration } from '@babel/types';\nimport { wrap } from 'module';\n\nEnzyme.configure({adapter:new EnzymeAdapter()})\n\ntest('it should render without any errors',()=>{\n  const wrapper = shallow(<App/>)\n  const appComponent = wrapper.find(`[data-test=\"component-App\"]`);\n\n  expect(appComponent.length).toBe(1)\n})\n\ntest('it should render a button',()=>{\n  const wrapper = shallow(<App/>)\n  const buttonComponent = wrapper.find(`[data-test=\"increment\"]`)\n  expect(buttonComponent.length).toBe(1)\n})\n\ntest('counter display should be displayed',()=>{\n  const wrapper = shallow(<App/>)\n  const counterDisplay = wrapper.find(`[data-test=\"counter-display\"]`)\n\n  expect(counterDisplay.length).toBe(0)\n})\n\ntest('state should start at 0',()=>{\n const wrapper = shallow(<App/>)\n const initialState = wrapper.state('counter')\n\n expect(initialState).toBe(0)\n})\n\n\n\ntest('after button clicking state should increment by 1',()=>{\n  const wrapper = shallow(<App/>)\n  const wrapperWithState = wrapper.setState({counter:7})\n})\n"]}