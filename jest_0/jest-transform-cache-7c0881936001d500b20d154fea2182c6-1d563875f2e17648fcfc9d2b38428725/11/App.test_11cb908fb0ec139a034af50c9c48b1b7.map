{"version":3,"sources":["App.test.js"],"names":["Enzyme","configure","adapter","EnzymeAdapter","setup","wrapper","findByDataTest","val","find","test","appComponent","expect","length","toBe","buttonComponent","counterDisplay","initialState","state","wrapperWithState","setState","counter","simulate","update","text","toContain"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AAGA;;AACA;;AACA;;;;AAEAA,gBAAOC,SAAP,CAAiB;AAACC,EAAAA,OAAO,EAAC,IAAIC,2BAAJ;AAAT,CAAjB;;AAGA,MAAMC,KAAK,GAAG,MAAI;AAChB,QAAMC,OAAO,GAAG,qBAAQ,6BAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR,CAAhB;AACA,SAAOA,OAAP;AACD,CAHD;;AAKA,MAAMC,cAAc,GAAG,CAACD,OAAD,EAASE,GAAT,KAAe;AACpC,SAAOF,OAAO,CAACG,IAAR,CAAc,eAAcD,GAAI,IAAhC,CAAP;AACD,CAFD;;AAKAE,IAAI,CAAC,qCAAD,EAAuC,MAAI;AAC7C,QAAMJ,OAAO,GAAGD,KAAK,EAArB;AACA,QAAMM,YAAY,GAAGJ,cAAc,CAACD,OAAD,EAAS,eAAT,CAAnC;AAEAM,EAAAA,MAAM,CAACD,YAAY,CAACE,MAAd,CAAN,CAA4BC,IAA5B,CAAiC,CAAjC;AACD,CALG,CAAJ;AAOAJ,IAAI,CAAC,qCAAD,EAAuC,MAAI;AAC7C,QAAMJ,OAAO,GAAGD,KAAK,EAArB;AACA,QAAMU,eAAe,GAAGR,cAAc,CAACD,OAAD,EAAS,WAAT,CAAtC;AACAM,EAAAA,MAAM,CAACG,eAAe,CAACF,MAAjB,CAAN,CAA+BC,IAA/B,CAAoC,CAApC;AACD,CAJG,CAAJ;AAMAJ,IAAI,CAAC,qCAAD,EAAuC,MAAI;AAC7C,QAAMJ,OAAO,GAAGD,KAAK,EAArB;AACA,QAAMU,eAAe,GAAGR,cAAc,CAACD,OAAD,EAAS,WAAT,CAAtC;AACAM,EAAAA,MAAM,CAACG,eAAe,CAACF,MAAjB,CAAN,CAA+BC,IAA/B,CAAoC,CAApC;AACD,CAJG,CAAJ;AAMAJ,IAAI,CAAC,qCAAD,EAAuC,MAAI;AAC7C,QAAMJ,OAAO,GAAGD,KAAK,EAArB;AACA,QAAMW,cAAc,GAAET,cAAc,CAACD,OAAD,EAAS,iBAAT,CAApC;AAEAM,EAAAA,MAAM,CAACI,cAAc,CAACH,MAAhB,CAAN,CAA8BC,IAA9B,CAAmC,CAAnC;AACD,CALG,CAAJ;AAOAJ,IAAI,CAAC,yBAAD,EAA2B,MAAI;AAClC,QAAMJ,OAAO,GAAGD,KAAK,EAArB;AACA,QAAMY,YAAY,GAAGX,OAAO,CAACY,KAAR,CAAc,SAAd,CAArB;AAEAN,EAAAA,MAAM,CAACK,YAAD,CAAN,CAAqBH,IAArB,CAA0B,CAA1B;AACA,CALG,CAAJ;AAOAJ,IAAI,CAAC,mDAAD,EAAqD,MAAI;AAC3D,QAAMJ,OAAO,GAAGD,KAAK,EAArB;AACA,QAAMc,gBAAgB,GAAGb,OAAO,CAACc,QAAR,CAAiB;AAACC,IAAAA,OAAO,EAAC;AAAT,GAAjB,CAAzB;AACA,QAAMN,eAAe,GAAGR,cAAc,CAACD,OAAD,EAAS,WAAT,CAAtC;AACAS,EAAAA,eAAe,CAACO,QAAhB,CAAyB,OAAzB;AACAhB,EAAAA,OAAO,CAACiB,MAAR;AACA,QAAMP,cAAc,GAAGT,cAAc,CAACD,OAAD,EAAS,iBAAT,CAArC;AACAM,EAAAA,MAAM,CAACI,cAAc,CAACQ,IAAf,EAAD,CAAN,CAA8BC,SAA9B,CAAwC,CAAxC;AACD,CARG,CAAJ;AAUAf,IAAI,CAAC,uCAAD,EAAyC,MAAI;AAC/C,QAAMJ,OAAO,GAAGD,KAAK,EAArB;AACA,QAAMY,YAAY,GAAGX,OAAO,CAACY,KAAR,CAAc,WAAd,CAArB;AACAN,EAAAA,MAAM,CAACK,YAAD,CAAN,CAAqBH,IAArB,CAA0B,MAA1B;AACD,CAJG,CAAJ","sourcesContent":["import React from 'react';\nimport Enzyme, {shallow} from \"enzyme\";\nimport EnzymeAdapter from \"enzyme-adapter-react-16\";\n\n\nimport App from './App';\nimport { exportAllDeclaration } from '@babel/types';\nimport { wrap } from 'module';\n\nEnzyme.configure({adapter:new EnzymeAdapter()})\n\n\nconst setup = ()=>{\n  const wrapper = shallow(<App/>)\n  return wrapper;\n}\n\nconst findByDataTest = (wrapper,val)=>{\n  return wrapper.find(`[data-test=\"${val}\"]`)\n}\n\n\ntest('it should render without any errors',()=>{\n  const wrapper = setup();\n  const appComponent = findByDataTest(wrapper,\"component-App\")\n\n  expect(appComponent.length).toBe(1)\n})\n\ntest('it should render a increment button',()=>{\n  const wrapper = setup();\n  const buttonComponent = findByDataTest(wrapper,\"increment\")\n  expect(buttonComponent.length).toBe(1)\n})\n\ntest('it should render a decrement button',()=>{\n  const wrapper = setup();\n  const buttonComponent = findByDataTest(wrapper,\"decrement\")\n  expect(buttonComponent.length).toBe(1)\n})\n\ntest('counter display should be displayed',()=>{\n  const wrapper = setup();\n  const counterDisplay =findByDataTest(wrapper,\"counter-display\")\n\n  expect(counterDisplay.length).toBe(1)\n})\n\ntest('state should start at 0',()=>{\n const wrapper = setup();\n const initialState = wrapper.state('counter')\n\n expect(initialState).toBe(0)\n})\n\ntest('after button clicking state should increment by 1',()=>{\n  const wrapper = setup();\n  const wrapperWithState = wrapper.setState({counter:7})\n  const buttonComponent = findByDataTest(wrapper,\"increment\")\n  buttonComponent.simulate('click')\n  wrapper.update();\n  const counterDisplay = findByDataTest(wrapper,\"counter-display\")\n  expect(counterDisplay.text()).toContain(8)\n})\n\ntest('it should not show error at the start',()=>{\n  const wrapper = setup();\n  const initialState = wrapper.state('showError')\n  expect(initialState).toBe('none')\n})\n\n\n"]}