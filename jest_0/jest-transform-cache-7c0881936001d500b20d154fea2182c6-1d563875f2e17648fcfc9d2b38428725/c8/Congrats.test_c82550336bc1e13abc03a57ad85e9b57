7c1a804a707e51036480af66bee18eda
"use strict";

var _interopRequireDefault = require("/home/jia/Desktop/tests/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/jia/Desktop/tests/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _react = _interopRequireDefault(require("react"));

var _enzyme = _interopRequireWildcard(require("enzyme"));

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _Congrats = _interopRequireDefault(require("./Congrats"));

var _testUtil = require("../test/testUtil");

var _jsxFileName = "/home/jia/Desktop/tests/src/Congrats.test.js";

_enzyme.default.configure({
  adapter: new _enzymeAdapterReact.default()
});

const setup = (props = {}) => {
  return (0, _enzyme.shallow)(_react.default.createElement(_Congrats.default, Object.assign({}, props, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 13
    },
    __self: void 0
  })));
};

test('should render without error', () => {
  const wrapper = setup();
  const congratsComp = findByTestAttr(wrapper, "congrats-component");
  expect(congratsComp.length).toBe(1);
});
test('should not render success when prop is false', () => {
  const wrapper = setup({
    success: false
  });
  const congratsComp = findByTestAttr(wrapper, "congrats-component");
  expect(congratsComp.text()).toBe('');
});
test('should render success when prop is true', () => {
  const wrapper = setup({
    success: true
  });
  const message = findByTestAttr(wrapper, "congrats-component");
  expect(message.text()).not.toBe(0);
});
test('should not throw warning with expected props', () => {
  (0, _testUtil.checkProps)({
    success: false
  }, _Congrats.default);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvbmdyYXRzLnRlc3QuanMiXSwibmFtZXMiOlsiRW56eW1lIiwiY29uZmlndXJlIiwiYWRhcHRlciIsIkVuenltZUFkYXB0ZXIiLCJzZXR1cCIsInByb3BzIiwidGVzdCIsIndyYXBwZXIiLCJjb25ncmF0c0NvbXAiLCJmaW5kQnlUZXN0QXR0ciIsImV4cGVjdCIsImxlbmd0aCIsInRvQmUiLCJzdWNjZXNzIiwidGV4dCIsIm1lc3NhZ2UiLCJub3QiLCJDb25ncmF0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBSUE7O0FBQ0E7Ozs7QUFFQUEsZ0JBQU9DLFNBQVAsQ0FBaUI7QUFBRUMsRUFBQUEsT0FBTyxFQUFFLElBQUlDLDJCQUFKO0FBQVgsQ0FBakI7O0FBRUEsTUFBTUMsS0FBSyxHQUFHLENBQUNDLEtBQUssR0FBRyxFQUFULEtBQWdCO0FBQzFCLFNBQU8scUJBQVEsNkJBQUMsaUJBQUQsb0JBQWNBLEtBQWQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FBUixDQUFQO0FBQ0gsQ0FGRDs7QUFJQUMsSUFBSSxDQUFDLDZCQUFELEVBQWdDLE1BQU07QUFDdEMsUUFBTUMsT0FBTyxHQUFHSCxLQUFLLEVBQXJCO0FBQ0EsUUFBTUksWUFBWSxHQUFHQyxjQUFjLENBQUNGLE9BQUQsRUFBVSxvQkFBVixDQUFuQztBQUVBRyxFQUFBQSxNQUFNLENBQUNGLFlBQVksQ0FBQ0csTUFBZCxDQUFOLENBQTRCQyxJQUE1QixDQUFpQyxDQUFqQztBQUNILENBTEcsQ0FBSjtBQU9BTixJQUFJLENBQUMsOENBQUQsRUFBaUQsTUFBTTtBQUN2RCxRQUFNQyxPQUFPLEdBQUdILEtBQUssQ0FBQztBQUFFUyxJQUFBQSxPQUFPLEVBQUU7QUFBWCxHQUFELENBQXJCO0FBQ0EsUUFBTUwsWUFBWSxHQUFHQyxjQUFjLENBQUNGLE9BQUQsRUFBVSxvQkFBVixDQUFuQztBQUVBRyxFQUFBQSxNQUFNLENBQUNGLFlBQVksQ0FBQ00sSUFBYixFQUFELENBQU4sQ0FBNEJGLElBQTVCLENBQWlDLEVBQWpDO0FBQ0gsQ0FMRyxDQUFKO0FBT0FOLElBQUksQ0FBQyx5Q0FBRCxFQUE0QyxNQUFNO0FBQ2xELFFBQU1DLE9BQU8sR0FBR0gsS0FBSyxDQUFDO0FBQUVTLElBQUFBLE9BQU8sRUFBRTtBQUFYLEdBQUQsQ0FBckI7QUFDQSxRQUFNRSxPQUFPLEdBQUdOLGNBQWMsQ0FBQ0YsT0FBRCxFQUFVLG9CQUFWLENBQTlCO0FBRUFHLEVBQUFBLE1BQU0sQ0FBQ0ssT0FBTyxDQUFDRCxJQUFSLEVBQUQsQ0FBTixDQUF1QkUsR0FBdkIsQ0FBMkJKLElBQTNCLENBQWdDLENBQWhDO0FBQ0gsQ0FMRyxDQUFKO0FBT0FOLElBQUksQ0FBQyw4Q0FBRCxFQUFpRCxNQUFNO0FBQ3ZELDRCQUFXO0FBQUVPLElBQUFBLE9BQU8sRUFBRTtBQUFYLEdBQVgsRUFBK0JJLGlCQUEvQjtBQUVILENBSEcsQ0FBSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBFbnp5bWUsIHsgc2hhbGxvdyB9IGZyb20gJ2VuenltZSdcbmltcG9ydCBFbnp5bWVBZGFwdGVyIGZyb20gJ2VuenltZS1hZGFwdGVyLXJlYWN0LTE2JztcblxuXG5cbmltcG9ydCBDb25ncmF0cyBmcm9tICcuL0NvbmdyYXRzJztcbmltcG9ydCB7IEZpbmRCeVRlc3RBdHRyLCBjaGVja1Byb3BzIH0gZnJvbSAnLi4vdGVzdC90ZXN0VXRpbCc7XG5cbkVuenltZS5jb25maWd1cmUoeyBhZGFwdGVyOiBuZXcgRW56eW1lQWRhcHRlcigpIH0pXG5cbmNvbnN0IHNldHVwID0gKHByb3BzID0ge30pID0+IHtcbiAgICByZXR1cm4gc2hhbGxvdyg8Q29uZ3JhdHMgey4uLnByb3BzfSAvPilcbn1cblxudGVzdCgnc2hvdWxkIHJlbmRlciB3aXRob3V0IGVycm9yJywgKCkgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBzZXR1cCgpO1xuICAgIGNvbnN0IGNvbmdyYXRzQ29tcCA9IGZpbmRCeVRlc3RBdHRyKHdyYXBwZXIsIFwiY29uZ3JhdHMtY29tcG9uZW50XCIpXG5cbiAgICBleHBlY3QoY29uZ3JhdHNDb21wLmxlbmd0aCkudG9CZSgxKVxufSlcblxudGVzdCgnc2hvdWxkIG5vdCByZW5kZXIgc3VjY2VzcyB3aGVuIHByb3AgaXMgZmFsc2UnLCAoKSA9PiB7XG4gICAgY29uc3Qgd3JhcHBlciA9IHNldHVwKHsgc3VjY2VzczogZmFsc2UgfSk7XG4gICAgY29uc3QgY29uZ3JhdHNDb21wID0gZmluZEJ5VGVzdEF0dHIod3JhcHBlciwgXCJjb25ncmF0cy1jb21wb25lbnRcIilcblxuICAgIGV4cGVjdChjb25ncmF0c0NvbXAudGV4dCgpKS50b0JlKCcnKVxufSlcblxudGVzdCgnc2hvdWxkIHJlbmRlciBzdWNjZXNzIHdoZW4gcHJvcCBpcyB0cnVlJywgKCkgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBzZXR1cCh7IHN1Y2Nlc3M6IHRydWUgfSk7XG4gICAgY29uc3QgbWVzc2FnZSA9IGZpbmRCeVRlc3RBdHRyKHdyYXBwZXIsIFwiY29uZ3JhdHMtY29tcG9uZW50XCIpXG5cbiAgICBleHBlY3QobWVzc2FnZS50ZXh0KCkpLm5vdC50b0JlKDApXG59KVxuXG50ZXN0KCdzaG91bGQgbm90IHRocm93IHdhcm5pbmcgd2l0aCBleHBlY3RlZCBwcm9wcycsICgpID0+IHtcbiAgICBjaGVja1Byb3BzKHsgc3VjY2VzczogZmFsc2UgfSwgQ29uZ3JhdHMpXG5cbn0pXG4iXX0=